/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const Type = {
  Keyword: "keyword",
  Long: "long",
  Double: "double",
  Datetime: "datetime",
  Boolean: "boolean",
} as const;
export type Type = ClosedEnum<typeof Type>;

/**
 * Types that do not need additional parameters.
 */
export type IndexConfigs = {
  type: Type;
};

export const TypeVector = {
  Vector: "vector",
} as const;
export type TypeVector = ClosedEnum<typeof TypeVector>;

/**
 * Vector similarity metric.
 */
export const Similarity = {
  Cosine: "cosine",
  L2Norm: "l2_norm",
  DotProduct: "dot_product",
  MaxInnerProduct: "max_inner_product",
} as const;
/**
 * Vector similarity metric.
 */
export type Similarity = ClosedEnum<typeof Similarity>;

export type IndexConfigsVector = {
  type: TypeVector;
  /**
   * Vector dimensions.
   */
  dimensions: number;
  /**
   * Vector similarity metric.
   */
  similarity?: Similarity | undefined;
};

export const TypeText = {
  Text: "text",
} as const;
export type TypeText = ClosedEnum<typeof TypeText>;

export const Analyzer = {
  Standard: "standard",
  Korean: "korean",
  Japanese: "japanese",
  English: "english",
} as const;
export type Analyzer = ClosedEnum<typeof Analyzer>;

export type IndexConfigsText = {
  type: TypeText;
  /**
   * Analyzers.
   */
  analyzers?: Array<Analyzer> | undefined;
};

export type IndexConfigsUnion =
  | IndexConfigs
  | IndexConfigsText
  | IndexConfigsVector;

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const IndexConfigs$inboundSchema: z.ZodType<
  IndexConfigs,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: Type$inboundSchema,
});

/** @internal */
export type IndexConfigs$Outbound = {
  type: string;
};

/** @internal */
export const IndexConfigs$outboundSchema: z.ZodType<
  IndexConfigs$Outbound,
  z.ZodTypeDef,
  IndexConfigs
> = z.object({
  type: Type$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndexConfigs$ {
  /** @deprecated use `IndexConfigs$inboundSchema` instead. */
  export const inboundSchema = IndexConfigs$inboundSchema;
  /** @deprecated use `IndexConfigs$outboundSchema` instead. */
  export const outboundSchema = IndexConfigs$outboundSchema;
  /** @deprecated use `IndexConfigs$Outbound` instead. */
  export type Outbound = IndexConfigs$Outbound;
}

export function indexConfigsToJSON(indexConfigs: IndexConfigs): string {
  return JSON.stringify(IndexConfigs$outboundSchema.parse(indexConfigs));
}

export function indexConfigsFromJSON(
  jsonString: string,
): SafeParseResult<IndexConfigs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IndexConfigs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IndexConfigs' from JSON`,
  );
}

/** @internal */
export const TypeVector$inboundSchema: z.ZodNativeEnum<typeof TypeVector> = z
  .nativeEnum(TypeVector);

/** @internal */
export const TypeVector$outboundSchema: z.ZodNativeEnum<typeof TypeVector> =
  TypeVector$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeVector$ {
  /** @deprecated use `TypeVector$inboundSchema` instead. */
  export const inboundSchema = TypeVector$inboundSchema;
  /** @deprecated use `TypeVector$outboundSchema` instead. */
  export const outboundSchema = TypeVector$outboundSchema;
}

/** @internal */
export const Similarity$inboundSchema: z.ZodNativeEnum<typeof Similarity> = z
  .nativeEnum(Similarity);

/** @internal */
export const Similarity$outboundSchema: z.ZodNativeEnum<typeof Similarity> =
  Similarity$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Similarity$ {
  /** @deprecated use `Similarity$inboundSchema` instead. */
  export const inboundSchema = Similarity$inboundSchema;
  /** @deprecated use `Similarity$outboundSchema` instead. */
  export const outboundSchema = Similarity$outboundSchema;
}

/** @internal */
export const IndexConfigsVector$inboundSchema: z.ZodType<
  IndexConfigsVector,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeVector$inboundSchema,
  dimensions: z.number().int(),
  similarity: Similarity$inboundSchema.default("cosine"),
});

/** @internal */
export type IndexConfigsVector$Outbound = {
  type: string;
  dimensions: number;
  similarity: string;
};

/** @internal */
export const IndexConfigsVector$outboundSchema: z.ZodType<
  IndexConfigsVector$Outbound,
  z.ZodTypeDef,
  IndexConfigsVector
> = z.object({
  type: TypeVector$outboundSchema,
  dimensions: z.number().int(),
  similarity: Similarity$outboundSchema.default("cosine"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndexConfigsVector$ {
  /** @deprecated use `IndexConfigsVector$inboundSchema` instead. */
  export const inboundSchema = IndexConfigsVector$inboundSchema;
  /** @deprecated use `IndexConfigsVector$outboundSchema` instead. */
  export const outboundSchema = IndexConfigsVector$outboundSchema;
  /** @deprecated use `IndexConfigsVector$Outbound` instead. */
  export type Outbound = IndexConfigsVector$Outbound;
}

export function indexConfigsVectorToJSON(
  indexConfigsVector: IndexConfigsVector,
): string {
  return JSON.stringify(
    IndexConfigsVector$outboundSchema.parse(indexConfigsVector),
  );
}

export function indexConfigsVectorFromJSON(
  jsonString: string,
): SafeParseResult<IndexConfigsVector, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IndexConfigsVector$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IndexConfigsVector' from JSON`,
  );
}

/** @internal */
export const TypeText$inboundSchema: z.ZodNativeEnum<typeof TypeText> = z
  .nativeEnum(TypeText);

/** @internal */
export const TypeText$outboundSchema: z.ZodNativeEnum<typeof TypeText> =
  TypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeText$ {
  /** @deprecated use `TypeText$inboundSchema` instead. */
  export const inboundSchema = TypeText$inboundSchema;
  /** @deprecated use `TypeText$outboundSchema` instead. */
  export const outboundSchema = TypeText$outboundSchema;
}

/** @internal */
export const Analyzer$inboundSchema: z.ZodNativeEnum<typeof Analyzer> = z
  .nativeEnum(Analyzer);

/** @internal */
export const Analyzer$outboundSchema: z.ZodNativeEnum<typeof Analyzer> =
  Analyzer$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Analyzer$ {
  /** @deprecated use `Analyzer$inboundSchema` instead. */
  export const inboundSchema = Analyzer$inboundSchema;
  /** @deprecated use `Analyzer$outboundSchema` instead. */
  export const outboundSchema = Analyzer$outboundSchema;
}

/** @internal */
export const IndexConfigsText$inboundSchema: z.ZodType<
  IndexConfigsText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeText$inboundSchema,
  analyzers: z.array(Analyzer$inboundSchema).optional(),
});

/** @internal */
export type IndexConfigsText$Outbound = {
  type: string;
  analyzers?: Array<string> | undefined;
};

/** @internal */
export const IndexConfigsText$outboundSchema: z.ZodType<
  IndexConfigsText$Outbound,
  z.ZodTypeDef,
  IndexConfigsText
> = z.object({
  type: TypeText$outboundSchema,
  analyzers: z.array(Analyzer$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndexConfigsText$ {
  /** @deprecated use `IndexConfigsText$inboundSchema` instead. */
  export const inboundSchema = IndexConfigsText$inboundSchema;
  /** @deprecated use `IndexConfigsText$outboundSchema` instead. */
  export const outboundSchema = IndexConfigsText$outboundSchema;
  /** @deprecated use `IndexConfigsText$Outbound` instead. */
  export type Outbound = IndexConfigsText$Outbound;
}

export function indexConfigsTextToJSON(
  indexConfigsText: IndexConfigsText,
): string {
  return JSON.stringify(
    IndexConfigsText$outboundSchema.parse(indexConfigsText),
  );
}

export function indexConfigsTextFromJSON(
  jsonString: string,
): SafeParseResult<IndexConfigsText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IndexConfigsText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IndexConfigsText' from JSON`,
  );
}

/** @internal */
export const IndexConfigsUnion$inboundSchema: z.ZodType<
  IndexConfigsUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => IndexConfigs$inboundSchema),
  z.lazy(() => IndexConfigsText$inboundSchema),
  z.lazy(() => IndexConfigsVector$inboundSchema),
]);

/** @internal */
export type IndexConfigsUnion$Outbound =
  | IndexConfigs$Outbound
  | IndexConfigsText$Outbound
  | IndexConfigsVector$Outbound;

/** @internal */
export const IndexConfigsUnion$outboundSchema: z.ZodType<
  IndexConfigsUnion$Outbound,
  z.ZodTypeDef,
  IndexConfigsUnion
> = z.union([
  z.lazy(() => IndexConfigs$outboundSchema),
  z.lazy(() => IndexConfigsText$outboundSchema),
  z.lazy(() => IndexConfigsVector$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndexConfigsUnion$ {
  /** @deprecated use `IndexConfigsUnion$inboundSchema` instead. */
  export const inboundSchema = IndexConfigsUnion$inboundSchema;
  /** @deprecated use `IndexConfigsUnion$outboundSchema` instead. */
  export const outboundSchema = IndexConfigsUnion$outboundSchema;
  /** @deprecated use `IndexConfigsUnion$Outbound` instead. */
  export type Outbound = IndexConfigsUnion$Outbound;
}

export function indexConfigsUnionToJSON(
  indexConfigsUnion: IndexConfigsUnion,
): string {
  return JSON.stringify(
    IndexConfigsUnion$outboundSchema.parse(indexConfigsUnion),
  );
}

export function indexConfigsUnionFromJSON(
  jsonString: string,
): SafeParseResult<IndexConfigsUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IndexConfigsUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IndexConfigsUnion' from JSON`,
  );
}
