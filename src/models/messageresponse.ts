/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type MessageResponse = {
  message: string;
};

/** @internal */
export const MessageResponse$inboundSchema: z.ZodType<
  MessageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type MessageResponse$Outbound = {
  message: string;
};

/** @internal */
export const MessageResponse$outboundSchema: z.ZodType<
  MessageResponse$Outbound,
  z.ZodTypeDef,
  MessageResponse
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageResponse$ {
  /** @deprecated use `MessageResponse$inboundSchema` instead. */
  export const inboundSchema = MessageResponse$inboundSchema;
  /** @deprecated use `MessageResponse$outboundSchema` instead. */
  export const outboundSchema = MessageResponse$outboundSchema;
  /** @deprecated use `MessageResponse$Outbound` instead. */
  export type Outbound = MessageResponse$Outbound;
}

export function messageResponseToJSON(
  messageResponse: MessageResponse,
): string {
  return JSON.stringify(MessageResponse$outboundSchema.parse(messageResponse));
}

export function messageResponseFromJSON(
  jsonString: string,
): SafeParseResult<MessageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageResponse' from JSON`,
  );
}
