/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type QueryCollectionRequestBody = {
  /**
   * Number of documents to return. Note that the maximum number of documents is 100.
   */
  size: number;
  /**
   * Query object.
   */
  query?: { [k: string]: any } | undefined;
  /**
   * If your application requires a strongly consistent read, set consistentRead to true. Although a strongly consistent read might take more time than an eventually consistent read, it always returns the last updated value.
   */
  consistentRead?: boolean | undefined;
  /**
   * If your application need to include vector values in the response, set includeVectors to true.
   */
  includeVectors?: boolean | undefined;
  /**
   * List of field name, sort direction pairs.
   */
  sort?: Array<{ [k: string]: any }> | undefined;
  /**
   * List of field name to include in results
   */
  fields?: Array<string> | undefined;
};

export type QueryCollectionRequest = {
  /**
   * Collection name.
   */
  collectionName: string;
  requestBody: QueryCollectionRequestBody;
};

export type QueryCollectionDoc = {
  /**
   * Collection name.
   */
  collection: string;
  /**
   * Document similarity score.
   */
  score: number;
  doc: { [k: string]: any };
};

/**
 * Documents selected by query.
 */
export type QueryCollectionResponse = {
  /**
   * Elapsed time in milliseconds.
   */
  took: number;
  /**
   * Maximum score.
   */
  maxScore: number;
  /**
   * Total number of documents returned.
   */
  total: number;
  /**
   * List of documents.
   */
  docs: Array<QueryCollectionDoc>;
};

/** @internal */
export const QueryCollectionRequestBody$inboundSchema: z.ZodType<
  QueryCollectionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  size: z.number().int(),
  query: z.record(z.any()).optional(),
  consistentRead: z.boolean().default(false),
  includeVectors: z.boolean().default(false),
  sort: z.array(z.record(z.any())).optional(),
  fields: z.array(z.string()).optional(),
});

/** @internal */
export type QueryCollectionRequestBody$Outbound = {
  size: number;
  query?: { [k: string]: any } | undefined;
  consistentRead: boolean;
  includeVectors: boolean;
  sort?: Array<{ [k: string]: any }> | undefined;
  fields?: Array<string> | undefined;
};

/** @internal */
export const QueryCollectionRequestBody$outboundSchema: z.ZodType<
  QueryCollectionRequestBody$Outbound,
  z.ZodTypeDef,
  QueryCollectionRequestBody
> = z.object({
  size: z.number().int(),
  query: z.record(z.any()).optional(),
  consistentRead: z.boolean().default(false),
  includeVectors: z.boolean().default(false),
  sort: z.array(z.record(z.any())).optional(),
  fields: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryCollectionRequestBody$ {
  /** @deprecated use `QueryCollectionRequestBody$inboundSchema` instead. */
  export const inboundSchema = QueryCollectionRequestBody$inboundSchema;
  /** @deprecated use `QueryCollectionRequestBody$outboundSchema` instead. */
  export const outboundSchema = QueryCollectionRequestBody$outboundSchema;
  /** @deprecated use `QueryCollectionRequestBody$Outbound` instead. */
  export type Outbound = QueryCollectionRequestBody$Outbound;
}

export function queryCollectionRequestBodyToJSON(
  queryCollectionRequestBody: QueryCollectionRequestBody,
): string {
  return JSON.stringify(
    QueryCollectionRequestBody$outboundSchema.parse(queryCollectionRequestBody),
  );
}

export function queryCollectionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<QueryCollectionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryCollectionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryCollectionRequestBody' from JSON`,
  );
}

/** @internal */
export const QueryCollectionRequest$inboundSchema: z.ZodType<
  QueryCollectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  collectionName: z.string(),
  RequestBody: z.lazy(() => QueryCollectionRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type QueryCollectionRequest$Outbound = {
  collectionName: string;
  RequestBody: QueryCollectionRequestBody$Outbound;
};

/** @internal */
export const QueryCollectionRequest$outboundSchema: z.ZodType<
  QueryCollectionRequest$Outbound,
  z.ZodTypeDef,
  QueryCollectionRequest
> = z.object({
  collectionName: z.string(),
  requestBody: z.lazy(() => QueryCollectionRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryCollectionRequest$ {
  /** @deprecated use `QueryCollectionRequest$inboundSchema` instead. */
  export const inboundSchema = QueryCollectionRequest$inboundSchema;
  /** @deprecated use `QueryCollectionRequest$outboundSchema` instead. */
  export const outboundSchema = QueryCollectionRequest$outboundSchema;
  /** @deprecated use `QueryCollectionRequest$Outbound` instead. */
  export type Outbound = QueryCollectionRequest$Outbound;
}

export function queryCollectionRequestToJSON(
  queryCollectionRequest: QueryCollectionRequest,
): string {
  return JSON.stringify(
    QueryCollectionRequest$outboundSchema.parse(queryCollectionRequest),
  );
}

export function queryCollectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<QueryCollectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryCollectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryCollectionRequest' from JSON`,
  );
}

/** @internal */
export const QueryCollectionDoc$inboundSchema: z.ZodType<
  QueryCollectionDoc,
  z.ZodTypeDef,
  unknown
> = z.object({
  collection: z.string(),
  score: z.number(),
  doc: z.record(z.any()),
});

/** @internal */
export type QueryCollectionDoc$Outbound = {
  collection: string;
  score: number;
  doc: { [k: string]: any };
};

/** @internal */
export const QueryCollectionDoc$outboundSchema: z.ZodType<
  QueryCollectionDoc$Outbound,
  z.ZodTypeDef,
  QueryCollectionDoc
> = z.object({
  collection: z.string(),
  score: z.number(),
  doc: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryCollectionDoc$ {
  /** @deprecated use `QueryCollectionDoc$inboundSchema` instead. */
  export const inboundSchema = QueryCollectionDoc$inboundSchema;
  /** @deprecated use `QueryCollectionDoc$outboundSchema` instead. */
  export const outboundSchema = QueryCollectionDoc$outboundSchema;
  /** @deprecated use `QueryCollectionDoc$Outbound` instead. */
  export type Outbound = QueryCollectionDoc$Outbound;
}

export function queryCollectionDocToJSON(
  queryCollectionDoc: QueryCollectionDoc,
): string {
  return JSON.stringify(
    QueryCollectionDoc$outboundSchema.parse(queryCollectionDoc),
  );
}

export function queryCollectionDocFromJSON(
  jsonString: string,
): SafeParseResult<QueryCollectionDoc, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryCollectionDoc$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryCollectionDoc' from JSON`,
  );
}

/** @internal */
export const QueryCollectionResponse$inboundSchema: z.ZodType<
  QueryCollectionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  took: z.number().int(),
  maxScore: z.number(),
  total: z.number().int(),
  docs: z.array(z.lazy(() => QueryCollectionDoc$inboundSchema)),
});

/** @internal */
export type QueryCollectionResponse$Outbound = {
  took: number;
  maxScore: number;
  total: number;
  docs: Array<QueryCollectionDoc$Outbound>;
};

/** @internal */
export const QueryCollectionResponse$outboundSchema: z.ZodType<
  QueryCollectionResponse$Outbound,
  z.ZodTypeDef,
  QueryCollectionResponse
> = z.object({
  took: z.number().int(),
  maxScore: z.number(),
  total: z.number().int(),
  docs: z.array(z.lazy(() => QueryCollectionDoc$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryCollectionResponse$ {
  /** @deprecated use `QueryCollectionResponse$inboundSchema` instead. */
  export const inboundSchema = QueryCollectionResponse$inboundSchema;
  /** @deprecated use `QueryCollectionResponse$outboundSchema` instead. */
  export const outboundSchema = QueryCollectionResponse$outboundSchema;
  /** @deprecated use `QueryCollectionResponse$Outbound` instead. */
  export type Outbound = QueryCollectionResponse$Outbound;
}

export function queryCollectionResponseToJSON(
  queryCollectionResponse: QueryCollectionResponse,
): string {
  return JSON.stringify(
    QueryCollectionResponse$outboundSchema.parse(queryCollectionResponse),
  );
}

export function queryCollectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<QueryCollectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryCollectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryCollectionResponse' from JSON`,
  );
}
