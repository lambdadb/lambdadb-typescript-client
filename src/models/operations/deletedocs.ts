/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteDocsRequestBody = {
  /**
   * A list of document IDs.
   */
  ids?: Array<string> | undefined;
  /**
   * Query filter.
   */
  filter?: { [k: string]: any } | undefined;
};

export type DeleteDocsRequest = {
  /**
   * Collection name.
   */
  collectionName: string;
  requestBody: DeleteDocsRequestBody;
};

/** @internal */
export const DeleteDocsRequestBody$inboundSchema: z.ZodType<
  DeleteDocsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()).optional(),
  filter: z.record(z.any()).optional(),
});

/** @internal */
export type DeleteDocsRequestBody$Outbound = {
  ids?: Array<string> | undefined;
  filter?: { [k: string]: any } | undefined;
};

/** @internal */
export const DeleteDocsRequestBody$outboundSchema: z.ZodType<
  DeleteDocsRequestBody$Outbound,
  z.ZodTypeDef,
  DeleteDocsRequestBody
> = z.object({
  ids: z.array(z.string()).optional(),
  filter: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDocsRequestBody$ {
  /** @deprecated use `DeleteDocsRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeleteDocsRequestBody$inboundSchema;
  /** @deprecated use `DeleteDocsRequestBody$outboundSchema` instead. */
  export const outboundSchema = DeleteDocsRequestBody$outboundSchema;
  /** @deprecated use `DeleteDocsRequestBody$Outbound` instead. */
  export type Outbound = DeleteDocsRequestBody$Outbound;
}

export function deleteDocsRequestBodyToJSON(
  deleteDocsRequestBody: DeleteDocsRequestBody,
): string {
  return JSON.stringify(
    DeleteDocsRequestBody$outboundSchema.parse(deleteDocsRequestBody),
  );
}

export function deleteDocsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDocsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDocsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDocsRequestBody' from JSON`,
  );
}

/** @internal */
export const DeleteDocsRequest$inboundSchema: z.ZodType<
  DeleteDocsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  collectionName: z.string(),
  RequestBody: z.lazy(() => DeleteDocsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeleteDocsRequest$Outbound = {
  collectionName: string;
  RequestBody: DeleteDocsRequestBody$Outbound;
};

/** @internal */
export const DeleteDocsRequest$outboundSchema: z.ZodType<
  DeleteDocsRequest$Outbound,
  z.ZodTypeDef,
  DeleteDocsRequest
> = z.object({
  collectionName: z.string(),
  requestBody: z.lazy(() => DeleteDocsRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteDocsRequest$ {
  /** @deprecated use `DeleteDocsRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteDocsRequest$inboundSchema;
  /** @deprecated use `DeleteDocsRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteDocsRequest$outboundSchema;
  /** @deprecated use `DeleteDocsRequest$Outbound` instead. */
  export type Outbound = DeleteDocsRequest$Outbound;
}

export function deleteDocsRequestToJSON(
  deleteDocsRequest: DeleteDocsRequest,
): string {
  return JSON.stringify(
    DeleteDocsRequest$outboundSchema.parse(deleteDocsRequest),
  );
}

export function deleteDocsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteDocsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteDocsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteDocsRequest' from JSON`,
  );
}
