/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * A list of collections matched with a projectName.
 */
export type ListCollectionsResponse = {
  collections: Array<models.CollectionResponse>;
};

/** @internal */
export const ListCollectionsResponse$inboundSchema: z.ZodType<
  ListCollectionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  collections: z.array(models.CollectionResponse$inboundSchema),
});

/** @internal */
export type ListCollectionsResponse$Outbound = {
  collections: Array<models.CollectionResponse$Outbound>;
};

/** @internal */
export const ListCollectionsResponse$outboundSchema: z.ZodType<
  ListCollectionsResponse$Outbound,
  z.ZodTypeDef,
  ListCollectionsResponse
> = z.object({
  collections: z.array(models.CollectionResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCollectionsResponse$ {
  /** @deprecated use `ListCollectionsResponse$inboundSchema` instead. */
  export const inboundSchema = ListCollectionsResponse$inboundSchema;
  /** @deprecated use `ListCollectionsResponse$outboundSchema` instead. */
  export const outboundSchema = ListCollectionsResponse$outboundSchema;
  /** @deprecated use `ListCollectionsResponse$Outbound` instead. */
  export type Outbound = ListCollectionsResponse$Outbound;
}

export function listCollectionsResponseToJSON(
  listCollectionsResponse: ListCollectionsResponse,
): string {
  return JSON.stringify(
    ListCollectionsResponse$outboundSchema.parse(listCollectionsResponse),
  );
}

export function listCollectionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCollectionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCollectionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCollectionsResponse' from JSON`,
  );
}
