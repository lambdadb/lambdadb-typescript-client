/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FetchDocsRequestBody = {
  /**
   * A list of document IDs to fetch. Note that the maximum number of document IDs is 100.
   */
  ids: Array<string>;
  /**
   * If your application requires a strongly consistent read, set consistentRead to true. Although a strongly consistent read might take more time than an eventually consistent read, it always returns the last updated value.
   */
  consistentRead?: boolean | undefined;
  /**
   * If your application need to include vector values in the response, set includeVectors to true.
   */
  includeVectors?: boolean | undefined;
};

export type FetchDocsRequest = {
  /**
   * Collection name.
   */
  collectionName: string;
  requestBody: FetchDocsRequestBody;
};

export type FetchDocsDoc = {
  collection: string;
  doc: { [k: string]: any };
};

/**
 * Fetched documents.
 */
export type FetchDocsResponse = {
  /**
   * Total number of documents returned.
   */
  total: number;
  /**
   * Elapsed time in milliseconds.
   */
  took: number;
  docs: Array<FetchDocsDoc>;
};

/** @internal */
export const FetchDocsRequestBody$inboundSchema: z.ZodType<
  FetchDocsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()),
  consistentRead: z.boolean().default(false),
  includeVectors: z.boolean().default(false),
});

/** @internal */
export type FetchDocsRequestBody$Outbound = {
  ids: Array<string>;
  consistentRead: boolean;
  includeVectors: boolean;
};

/** @internal */
export const FetchDocsRequestBody$outboundSchema: z.ZodType<
  FetchDocsRequestBody$Outbound,
  z.ZodTypeDef,
  FetchDocsRequestBody
> = z.object({
  ids: z.array(z.string()),
  consistentRead: z.boolean().default(false),
  includeVectors: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchDocsRequestBody$ {
  /** @deprecated use `FetchDocsRequestBody$inboundSchema` instead. */
  export const inboundSchema = FetchDocsRequestBody$inboundSchema;
  /** @deprecated use `FetchDocsRequestBody$outboundSchema` instead. */
  export const outboundSchema = FetchDocsRequestBody$outboundSchema;
  /** @deprecated use `FetchDocsRequestBody$Outbound` instead. */
  export type Outbound = FetchDocsRequestBody$Outbound;
}

export function fetchDocsRequestBodyToJSON(
  fetchDocsRequestBody: FetchDocsRequestBody,
): string {
  return JSON.stringify(
    FetchDocsRequestBody$outboundSchema.parse(fetchDocsRequestBody),
  );
}

export function fetchDocsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<FetchDocsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FetchDocsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchDocsRequestBody' from JSON`,
  );
}

/** @internal */
export const FetchDocsRequest$inboundSchema: z.ZodType<
  FetchDocsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  collectionName: z.string(),
  RequestBody: z.lazy(() => FetchDocsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type FetchDocsRequest$Outbound = {
  collectionName: string;
  RequestBody: FetchDocsRequestBody$Outbound;
};

/** @internal */
export const FetchDocsRequest$outboundSchema: z.ZodType<
  FetchDocsRequest$Outbound,
  z.ZodTypeDef,
  FetchDocsRequest
> = z.object({
  collectionName: z.string(),
  requestBody: z.lazy(() => FetchDocsRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchDocsRequest$ {
  /** @deprecated use `FetchDocsRequest$inboundSchema` instead. */
  export const inboundSchema = FetchDocsRequest$inboundSchema;
  /** @deprecated use `FetchDocsRequest$outboundSchema` instead. */
  export const outboundSchema = FetchDocsRequest$outboundSchema;
  /** @deprecated use `FetchDocsRequest$Outbound` instead. */
  export type Outbound = FetchDocsRequest$Outbound;
}

export function fetchDocsRequestToJSON(
  fetchDocsRequest: FetchDocsRequest,
): string {
  return JSON.stringify(
    FetchDocsRequest$outboundSchema.parse(fetchDocsRequest),
  );
}

export function fetchDocsRequestFromJSON(
  jsonString: string,
): SafeParseResult<FetchDocsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FetchDocsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchDocsRequest' from JSON`,
  );
}

/** @internal */
export const FetchDocsDoc$inboundSchema: z.ZodType<
  FetchDocsDoc,
  z.ZodTypeDef,
  unknown
> = z.object({
  collection: z.string(),
  doc: z.record(z.any()),
});

/** @internal */
export type FetchDocsDoc$Outbound = {
  collection: string;
  doc: { [k: string]: any };
};

/** @internal */
export const FetchDocsDoc$outboundSchema: z.ZodType<
  FetchDocsDoc$Outbound,
  z.ZodTypeDef,
  FetchDocsDoc
> = z.object({
  collection: z.string(),
  doc: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchDocsDoc$ {
  /** @deprecated use `FetchDocsDoc$inboundSchema` instead. */
  export const inboundSchema = FetchDocsDoc$inboundSchema;
  /** @deprecated use `FetchDocsDoc$outboundSchema` instead. */
  export const outboundSchema = FetchDocsDoc$outboundSchema;
  /** @deprecated use `FetchDocsDoc$Outbound` instead. */
  export type Outbound = FetchDocsDoc$Outbound;
}

export function fetchDocsDocToJSON(fetchDocsDoc: FetchDocsDoc): string {
  return JSON.stringify(FetchDocsDoc$outboundSchema.parse(fetchDocsDoc));
}

export function fetchDocsDocFromJSON(
  jsonString: string,
): SafeParseResult<FetchDocsDoc, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FetchDocsDoc$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchDocsDoc' from JSON`,
  );
}

/** @internal */
export const FetchDocsResponse$inboundSchema: z.ZodType<
  FetchDocsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.number().int(),
  took: z.number().int(),
  docs: z.array(z.lazy(() => FetchDocsDoc$inboundSchema)),
});

/** @internal */
export type FetchDocsResponse$Outbound = {
  total: number;
  took: number;
  docs: Array<FetchDocsDoc$Outbound>;
};

/** @internal */
export const FetchDocsResponse$outboundSchema: z.ZodType<
  FetchDocsResponse$Outbound,
  z.ZodTypeDef,
  FetchDocsResponse
> = z.object({
  total: z.number().int(),
  took: z.number().int(),
  docs: z.array(z.lazy(() => FetchDocsDoc$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FetchDocsResponse$ {
  /** @deprecated use `FetchDocsResponse$inboundSchema` instead. */
  export const inboundSchema = FetchDocsResponse$inboundSchema;
  /** @deprecated use `FetchDocsResponse$outboundSchema` instead. */
  export const outboundSchema = FetchDocsResponse$outboundSchema;
  /** @deprecated use `FetchDocsResponse$Outbound` instead. */
  export type Outbound = FetchDocsResponse$Outbound;
}

export function fetchDocsResponseToJSON(
  fetchDocsResponse: FetchDocsResponse,
): string {
  return JSON.stringify(
    FetchDocsResponse$outboundSchema.parse(fetchDocsResponse),
  );
}

export function fetchDocsResponseFromJSON(
  jsonString: string,
): SafeParseResult<FetchDocsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FetchDocsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FetchDocsResponse' from JSON`,
  );
}
