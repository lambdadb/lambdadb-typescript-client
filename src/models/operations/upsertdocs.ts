/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpsertDocsDoc = {};

export type UpsertDocsRequestBody = {
  /**
   * A list of documents to upsert.
   */
  docs: Array<UpsertDocsDoc>;
};

export type UpsertDocsRequest = {
  /**
   * Project name.
   */
  projectName: string;
  /**
   * Collection name.
   */
  collectionName: string;
  requestBody: UpsertDocsRequestBody;
};

/**
 * Upsert request accepted.
 */
export type UpsertDocsResponse = {
  message?: string | undefined;
};

/** @internal */
export const UpsertDocsDoc$inboundSchema: z.ZodType<
  UpsertDocsDoc,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpsertDocsDoc$Outbound = {};

/** @internal */
export const UpsertDocsDoc$outboundSchema: z.ZodType<
  UpsertDocsDoc$Outbound,
  z.ZodTypeDef,
  UpsertDocsDoc
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertDocsDoc$ {
  /** @deprecated use `UpsertDocsDoc$inboundSchema` instead. */
  export const inboundSchema = UpsertDocsDoc$inboundSchema;
  /** @deprecated use `UpsertDocsDoc$outboundSchema` instead. */
  export const outboundSchema = UpsertDocsDoc$outboundSchema;
  /** @deprecated use `UpsertDocsDoc$Outbound` instead. */
  export type Outbound = UpsertDocsDoc$Outbound;
}

export function upsertDocsDocToJSON(upsertDocsDoc: UpsertDocsDoc): string {
  return JSON.stringify(UpsertDocsDoc$outboundSchema.parse(upsertDocsDoc));
}

export function upsertDocsDocFromJSON(
  jsonString: string,
): SafeParseResult<UpsertDocsDoc, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertDocsDoc$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertDocsDoc' from JSON`,
  );
}

/** @internal */
export const UpsertDocsRequestBody$inboundSchema: z.ZodType<
  UpsertDocsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  docs: z.array(z.lazy(() => UpsertDocsDoc$inboundSchema)),
});

/** @internal */
export type UpsertDocsRequestBody$Outbound = {
  docs: Array<UpsertDocsDoc$Outbound>;
};

/** @internal */
export const UpsertDocsRequestBody$outboundSchema: z.ZodType<
  UpsertDocsRequestBody$Outbound,
  z.ZodTypeDef,
  UpsertDocsRequestBody
> = z.object({
  docs: z.array(z.lazy(() => UpsertDocsDoc$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertDocsRequestBody$ {
  /** @deprecated use `UpsertDocsRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpsertDocsRequestBody$inboundSchema;
  /** @deprecated use `UpsertDocsRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpsertDocsRequestBody$outboundSchema;
  /** @deprecated use `UpsertDocsRequestBody$Outbound` instead. */
  export type Outbound = UpsertDocsRequestBody$Outbound;
}

export function upsertDocsRequestBodyToJSON(
  upsertDocsRequestBody: UpsertDocsRequestBody,
): string {
  return JSON.stringify(
    UpsertDocsRequestBody$outboundSchema.parse(upsertDocsRequestBody),
  );
}

export function upsertDocsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpsertDocsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertDocsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertDocsRequestBody' from JSON`,
  );
}

/** @internal */
export const UpsertDocsRequest$inboundSchema: z.ZodType<
  UpsertDocsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectName: z.string(),
  collectionName: z.string(),
  RequestBody: z.lazy(() => UpsertDocsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpsertDocsRequest$Outbound = {
  projectName: string;
  collectionName: string;
  RequestBody: UpsertDocsRequestBody$Outbound;
};

/** @internal */
export const UpsertDocsRequest$outboundSchema: z.ZodType<
  UpsertDocsRequest$Outbound,
  z.ZodTypeDef,
  UpsertDocsRequest
> = z.object({
  projectName: z.string(),
  collectionName: z.string(),
  requestBody: z.lazy(() => UpsertDocsRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertDocsRequest$ {
  /** @deprecated use `UpsertDocsRequest$inboundSchema` instead. */
  export const inboundSchema = UpsertDocsRequest$inboundSchema;
  /** @deprecated use `UpsertDocsRequest$outboundSchema` instead. */
  export const outboundSchema = UpsertDocsRequest$outboundSchema;
  /** @deprecated use `UpsertDocsRequest$Outbound` instead. */
  export type Outbound = UpsertDocsRequest$Outbound;
}

export function upsertDocsRequestToJSON(
  upsertDocsRequest: UpsertDocsRequest,
): string {
  return JSON.stringify(
    UpsertDocsRequest$outboundSchema.parse(upsertDocsRequest),
  );
}

export function upsertDocsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpsertDocsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertDocsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertDocsRequest' from JSON`,
  );
}

/** @internal */
export const UpsertDocsResponse$inboundSchema: z.ZodType<
  UpsertDocsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type UpsertDocsResponse$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const UpsertDocsResponse$outboundSchema: z.ZodType<
  UpsertDocsResponse$Outbound,
  z.ZodTypeDef,
  UpsertDocsResponse
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpsertDocsResponse$ {
  /** @deprecated use `UpsertDocsResponse$inboundSchema` instead. */
  export const inboundSchema = UpsertDocsResponse$inboundSchema;
  /** @deprecated use `UpsertDocsResponse$outboundSchema` instead. */
  export const outboundSchema = UpsertDocsResponse$outboundSchema;
  /** @deprecated use `UpsertDocsResponse$Outbound` instead. */
  export type Outbound = UpsertDocsResponse$Outbound;
}

export function upsertDocsResponseToJSON(
  upsertDocsResponse: UpsertDocsResponse,
): string {
  return JSON.stringify(
    UpsertDocsResponse$outboundSchema.parse(upsertDocsResponse),
  );
}

export function upsertDocsResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpsertDocsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpsertDocsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpsertDocsResponse' from JSON`,
  );
}
