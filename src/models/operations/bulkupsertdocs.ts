/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BulkUpsertDocsRequestBody = {
  /**
   * Object key uploaded based on bulk upsert info.
   */
  objectKey: string;
};

export type BulkUpsertDocsRequest = {
  /**
   * Collection name.
   */
  collectionName: string;
  requestBody: BulkUpsertDocsRequestBody;
};

/** @internal */
export const BulkUpsertDocsRequestBody$inboundSchema: z.ZodType<
  BulkUpsertDocsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectKey: z.string(),
});

/** @internal */
export type BulkUpsertDocsRequestBody$Outbound = {
  objectKey: string;
};

/** @internal */
export const BulkUpsertDocsRequestBody$outboundSchema: z.ZodType<
  BulkUpsertDocsRequestBody$Outbound,
  z.ZodTypeDef,
  BulkUpsertDocsRequestBody
> = z.object({
  objectKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkUpsertDocsRequestBody$ {
  /** @deprecated use `BulkUpsertDocsRequestBody$inboundSchema` instead. */
  export const inboundSchema = BulkUpsertDocsRequestBody$inboundSchema;
  /** @deprecated use `BulkUpsertDocsRequestBody$outboundSchema` instead. */
  export const outboundSchema = BulkUpsertDocsRequestBody$outboundSchema;
  /** @deprecated use `BulkUpsertDocsRequestBody$Outbound` instead. */
  export type Outbound = BulkUpsertDocsRequestBody$Outbound;
}

export function bulkUpsertDocsRequestBodyToJSON(
  bulkUpsertDocsRequestBody: BulkUpsertDocsRequestBody,
): string {
  return JSON.stringify(
    BulkUpsertDocsRequestBody$outboundSchema.parse(bulkUpsertDocsRequestBody),
  );
}

export function bulkUpsertDocsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<BulkUpsertDocsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkUpsertDocsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkUpsertDocsRequestBody' from JSON`,
  );
}

/** @internal */
export const BulkUpsertDocsRequest$inboundSchema: z.ZodType<
  BulkUpsertDocsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  collectionName: z.string(),
  RequestBody: z.lazy(() => BulkUpsertDocsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type BulkUpsertDocsRequest$Outbound = {
  collectionName: string;
  RequestBody: BulkUpsertDocsRequestBody$Outbound;
};

/** @internal */
export const BulkUpsertDocsRequest$outboundSchema: z.ZodType<
  BulkUpsertDocsRequest$Outbound,
  z.ZodTypeDef,
  BulkUpsertDocsRequest
> = z.object({
  collectionName: z.string(),
  requestBody: z.lazy(() => BulkUpsertDocsRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkUpsertDocsRequest$ {
  /** @deprecated use `BulkUpsertDocsRequest$inboundSchema` instead. */
  export const inboundSchema = BulkUpsertDocsRequest$inboundSchema;
  /** @deprecated use `BulkUpsertDocsRequest$outboundSchema` instead. */
  export const outboundSchema = BulkUpsertDocsRequest$outboundSchema;
  /** @deprecated use `BulkUpsertDocsRequest$Outbound` instead. */
  export type Outbound = BulkUpsertDocsRequest$Outbound;
}

export function bulkUpsertDocsRequestToJSON(
  bulkUpsertDocsRequest: BulkUpsertDocsRequest,
): string {
  return JSON.stringify(
    BulkUpsertDocsRequest$outboundSchema.parse(bulkUpsertDocsRequest),
  );
}

export function bulkUpsertDocsRequestFromJSON(
  jsonString: string,
): SafeParseResult<BulkUpsertDocsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkUpsertDocsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkUpsertDocsRequest' from JSON`,
  );
}
