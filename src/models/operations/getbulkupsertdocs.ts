/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBulkUpsertDocsRequest = {
  /**
   * Collection name.
   */
  collectionName: string;
};

/**
 * Content type that must be specified when uploading documents.
 */
export const Type = {
  ApplicationJson: "application/json",
} as const;
/**
 * Content type that must be specified when uploading documents.
 */
export type Type = ClosedEnum<typeof Type>;

/**
 * HTTP method that must be specified when uploading documents.
 */
export const HttpMethod = {
  Put: "PUT",
} as const;
/**
 * HTTP method that must be specified when uploading documents.
 */
export type HttpMethod = ClosedEnum<typeof HttpMethod>;

/**
 * Required info to upload documents.
 */
export type GetBulkUpsertDocsResponse = {
  /**
   * Presigned URL.
   */
  url: string;
  /**
   * Content type that must be specified when uploading documents.
   */
  type?: Type | undefined;
  /**
   * HTTP method that must be specified when uploading documents.
   */
  httpMethod?: HttpMethod | undefined;
  /**
   * Object key that must be specified when uploading documents.
   */
  objectKey: string;
  /**
   * Object size limit in bytes.
   */
  sizeLimitBytes?: number | undefined;
};

/** @internal */
export const GetBulkUpsertDocsRequest$inboundSchema: z.ZodType<
  GetBulkUpsertDocsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  collectionName: z.string(),
});

/** @internal */
export type GetBulkUpsertDocsRequest$Outbound = {
  collectionName: string;
};

/** @internal */
export const GetBulkUpsertDocsRequest$outboundSchema: z.ZodType<
  GetBulkUpsertDocsRequest$Outbound,
  z.ZodTypeDef,
  GetBulkUpsertDocsRequest
> = z.object({
  collectionName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBulkUpsertDocsRequest$ {
  /** @deprecated use `GetBulkUpsertDocsRequest$inboundSchema` instead. */
  export const inboundSchema = GetBulkUpsertDocsRequest$inboundSchema;
  /** @deprecated use `GetBulkUpsertDocsRequest$outboundSchema` instead. */
  export const outboundSchema = GetBulkUpsertDocsRequest$outboundSchema;
  /** @deprecated use `GetBulkUpsertDocsRequest$Outbound` instead. */
  export type Outbound = GetBulkUpsertDocsRequest$Outbound;
}

export function getBulkUpsertDocsRequestToJSON(
  getBulkUpsertDocsRequest: GetBulkUpsertDocsRequest,
): string {
  return JSON.stringify(
    GetBulkUpsertDocsRequest$outboundSchema.parse(getBulkUpsertDocsRequest),
  );
}

export function getBulkUpsertDocsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBulkUpsertDocsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBulkUpsertDocsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBulkUpsertDocsRequest' from JSON`,
  );
}

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const HttpMethod$inboundSchema: z.ZodNativeEnum<typeof HttpMethod> = z
  .nativeEnum(HttpMethod);

/** @internal */
export const HttpMethod$outboundSchema: z.ZodNativeEnum<typeof HttpMethod> =
  HttpMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HttpMethod$ {
  /** @deprecated use `HttpMethod$inboundSchema` instead. */
  export const inboundSchema = HttpMethod$inboundSchema;
  /** @deprecated use `HttpMethod$outboundSchema` instead. */
  export const outboundSchema = HttpMethod$outboundSchema;
}

/** @internal */
export const GetBulkUpsertDocsResponse$inboundSchema: z.ZodType<
  GetBulkUpsertDocsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  type: Type$inboundSchema.default("application/json"),
  httpMethod: HttpMethod$inboundSchema.default("PUT"),
  objectKey: z.string(),
  sizeLimitBytes: z.number().int().default(209715200),
});

/** @internal */
export type GetBulkUpsertDocsResponse$Outbound = {
  url: string;
  type: string;
  httpMethod: string;
  objectKey: string;
  sizeLimitBytes: number;
};

/** @internal */
export const GetBulkUpsertDocsResponse$outboundSchema: z.ZodType<
  GetBulkUpsertDocsResponse$Outbound,
  z.ZodTypeDef,
  GetBulkUpsertDocsResponse
> = z.object({
  url: z.string(),
  type: Type$outboundSchema.default("application/json"),
  httpMethod: HttpMethod$outboundSchema.default("PUT"),
  objectKey: z.string(),
  sizeLimitBytes: z.number().int().default(209715200),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBulkUpsertDocsResponse$ {
  /** @deprecated use `GetBulkUpsertDocsResponse$inboundSchema` instead. */
  export const inboundSchema = GetBulkUpsertDocsResponse$inboundSchema;
  /** @deprecated use `GetBulkUpsertDocsResponse$outboundSchema` instead. */
  export const outboundSchema = GetBulkUpsertDocsResponse$outboundSchema;
  /** @deprecated use `GetBulkUpsertDocsResponse$Outbound` instead. */
  export type Outbound = GetBulkUpsertDocsResponse$Outbound;
}

export function getBulkUpsertDocsResponseToJSON(
  getBulkUpsertDocsResponse: GetBulkUpsertDocsResponse,
): string {
  return JSON.stringify(
    GetBulkUpsertDocsResponse$outboundSchema.parse(getBulkUpsertDocsResponse),
  );
}

export function getBulkUpsertDocsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetBulkUpsertDocsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBulkUpsertDocsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBulkUpsertDocsResponse' from JSON`,
  );
}
