/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateCollectionRequestBody = {
  /**
   * Collection name must be unique within a project and the supported maximum length is 52.
   */
  collectionName: string;
  indexConfigs?: { [k: string]: models.IndexConfigsUnion } | undefined;
  sourceProjectName?: string | undefined;
  sourceCollectionName?: string | undefined;
  sourceDatetime?: string | undefined;
  sourceProjectApiKey?: string | undefined;
};

export type CreateCollectionRequest = {
  /**
   * Project name.
   */
  projectName: string;
  requestBody: CreateCollectionRequestBody;
};

/** @internal */
export const CreateCollectionRequestBody$inboundSchema: z.ZodType<
  CreateCollectionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  collectionName: z.string(),
  indexConfigs: z.record(models.IndexConfigsUnion$inboundSchema).optional(),
  sourceProjectName: z.string().optional(),
  sourceCollectionName: z.string().optional(),
  sourceDatetime: z.string().optional(),
  sourceProjectApiKey: z.string().optional(),
});

/** @internal */
export type CreateCollectionRequestBody$Outbound = {
  collectionName: string;
  indexConfigs?: { [k: string]: models.IndexConfigsUnion$Outbound } | undefined;
  sourceProjectName?: string | undefined;
  sourceCollectionName?: string | undefined;
  sourceDatetime?: string | undefined;
  sourceProjectApiKey?: string | undefined;
};

/** @internal */
export const CreateCollectionRequestBody$outboundSchema: z.ZodType<
  CreateCollectionRequestBody$Outbound,
  z.ZodTypeDef,
  CreateCollectionRequestBody
> = z.object({
  collectionName: z.string(),
  indexConfigs: z.record(models.IndexConfigsUnion$outboundSchema).optional(),
  sourceProjectName: z.string().optional(),
  sourceCollectionName: z.string().optional(),
  sourceDatetime: z.string().optional(),
  sourceProjectApiKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCollectionRequestBody$ {
  /** @deprecated use `CreateCollectionRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateCollectionRequestBody$inboundSchema;
  /** @deprecated use `CreateCollectionRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateCollectionRequestBody$outboundSchema;
  /** @deprecated use `CreateCollectionRequestBody$Outbound` instead. */
  export type Outbound = CreateCollectionRequestBody$Outbound;
}

export function createCollectionRequestBodyToJSON(
  createCollectionRequestBody: CreateCollectionRequestBody,
): string {
  return JSON.stringify(
    CreateCollectionRequestBody$outboundSchema.parse(
      createCollectionRequestBody,
    ),
  );
}

export function createCollectionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateCollectionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCollectionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCollectionRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateCollectionRequest$inboundSchema: z.ZodType<
  CreateCollectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectName: z.string(),
  RequestBody: z.lazy(() => CreateCollectionRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateCollectionRequest$Outbound = {
  projectName: string;
  RequestBody: CreateCollectionRequestBody$Outbound;
};

/** @internal */
export const CreateCollectionRequest$outboundSchema: z.ZodType<
  CreateCollectionRequest$Outbound,
  z.ZodTypeDef,
  CreateCollectionRequest
> = z.object({
  projectName: z.string(),
  requestBody: z.lazy(() => CreateCollectionRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCollectionRequest$ {
  /** @deprecated use `CreateCollectionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCollectionRequest$inboundSchema;
  /** @deprecated use `CreateCollectionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCollectionRequest$outboundSchema;
  /** @deprecated use `CreateCollectionRequest$Outbound` instead. */
  export type Outbound = CreateCollectionRequest$Outbound;
}

export function createCollectionRequestToJSON(
  createCollectionRequest: CreateCollectionRequest,
): string {
  return JSON.stringify(
    CreateCollectionRequest$outboundSchema.parse(createCollectionRequest),
  );
}

export function createCollectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCollectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCollectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCollectionRequest' from JSON`,
  );
}
