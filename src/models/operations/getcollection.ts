/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetCollectionRequest = {
  /**
   * Collection name.
   */
  collectionName: string;
};

/**
 * Describe collection success.
 */
export type GetCollectionResponse = {
  collection: models.CollectionResponse;
};

/** @internal */
export const GetCollectionRequest$inboundSchema: z.ZodType<
  GetCollectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  collectionName: z.string(),
});

/** @internal */
export type GetCollectionRequest$Outbound = {
  collectionName: string;
};

/** @internal */
export const GetCollectionRequest$outboundSchema: z.ZodType<
  GetCollectionRequest$Outbound,
  z.ZodTypeDef,
  GetCollectionRequest
> = z.object({
  collectionName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCollectionRequest$ {
  /** @deprecated use `GetCollectionRequest$inboundSchema` instead. */
  export const inboundSchema = GetCollectionRequest$inboundSchema;
  /** @deprecated use `GetCollectionRequest$outboundSchema` instead. */
  export const outboundSchema = GetCollectionRequest$outboundSchema;
  /** @deprecated use `GetCollectionRequest$Outbound` instead. */
  export type Outbound = GetCollectionRequest$Outbound;
}

export function getCollectionRequestToJSON(
  getCollectionRequest: GetCollectionRequest,
): string {
  return JSON.stringify(
    GetCollectionRequest$outboundSchema.parse(getCollectionRequest),
  );
}

export function getCollectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCollectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCollectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCollectionRequest' from JSON`,
  );
}

/** @internal */
export const GetCollectionResponse$inboundSchema: z.ZodType<
  GetCollectionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  collection: models.CollectionResponse$inboundSchema,
});

/** @internal */
export type GetCollectionResponse$Outbound = {
  collection: models.CollectionResponse$Outbound;
};

/** @internal */
export const GetCollectionResponse$outboundSchema: z.ZodType<
  GetCollectionResponse$Outbound,
  z.ZodTypeDef,
  GetCollectionResponse
> = z.object({
  collection: models.CollectionResponse$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCollectionResponse$ {
  /** @deprecated use `GetCollectionResponse$inboundSchema` instead. */
  export const inboundSchema = GetCollectionResponse$inboundSchema;
  /** @deprecated use `GetCollectionResponse$outboundSchema` instead. */
  export const outboundSchema = GetCollectionResponse$outboundSchema;
  /** @deprecated use `GetCollectionResponse$Outbound` instead. */
  export type Outbound = GetCollectionResponse$Outbound;
}

export function getCollectionResponseToJSON(
  getCollectionResponse: GetCollectionResponse,
): string {
  return JSON.stringify(
    GetCollectionResponse$outboundSchema.parse(getCollectionResponse),
  );
}

export function getCollectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCollectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCollectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCollectionResponse' from JSON`,
  );
}
