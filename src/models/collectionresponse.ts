/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  IndexConfigsUnion,
  IndexConfigsUnion$inboundSchema,
  IndexConfigsUnion$Outbound,
  IndexConfigsUnion$outboundSchema,
} from "./indexconfigsunion.js";
import {
  Status,
  Status$inboundSchema,
  Status$outboundSchema,
} from "./status.js";

export type CollectionResponse = {
  /**
   * Project name.
   */
  projectName: string;
  /**
   * Collection name.
   */
  collectionName: string;
  indexConfigs: { [k: string]: IndexConfigsUnion };
  /**
   * Total number of documents.
   */
  numDocs: number;
  /**
   * Source project name.
   */
  sourceProjectName?: string | undefined;
  /**
   * Source collection name.
   */
  sourceCollectionName?: string | undefined;
  /**
   * Source collection version.
   */
  sourceCollectionVersionId?: string | undefined;
  /**
   * Status
   */
  collectionStatus: Status;
};

/** @internal */
export const CollectionResponse$inboundSchema: z.ZodType<
  CollectionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectName: z.string(),
  collectionName: z.string(),
  indexConfigs: z.record(IndexConfigsUnion$inboundSchema),
  numDocs: z.number().int(),
  sourceProjectName: z.string().optional(),
  sourceCollectionName: z.string().optional(),
  sourceCollectionVersionId: z.string().optional(),
  collectionStatus: Status$inboundSchema,
});

/** @internal */
export type CollectionResponse$Outbound = {
  projectName: string;
  collectionName: string;
  indexConfigs: { [k: string]: IndexConfigsUnion$Outbound };
  numDocs: number;
  sourceProjectName?: string | undefined;
  sourceCollectionName?: string | undefined;
  sourceCollectionVersionId?: string | undefined;
  collectionStatus: string;
};

/** @internal */
export const CollectionResponse$outboundSchema: z.ZodType<
  CollectionResponse$Outbound,
  z.ZodTypeDef,
  CollectionResponse
> = z.object({
  projectName: z.string(),
  collectionName: z.string(),
  indexConfigs: z.record(IndexConfigsUnion$outboundSchema),
  numDocs: z.number().int(),
  sourceProjectName: z.string().optional(),
  sourceCollectionName: z.string().optional(),
  sourceCollectionVersionId: z.string().optional(),
  collectionStatus: Status$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionResponse$ {
  /** @deprecated use `CollectionResponse$inboundSchema` instead. */
  export const inboundSchema = CollectionResponse$inboundSchema;
  /** @deprecated use `CollectionResponse$outboundSchema` instead. */
  export const outboundSchema = CollectionResponse$outboundSchema;
  /** @deprecated use `CollectionResponse$Outbound` instead. */
  export type Outbound = CollectionResponse$Outbound;
}

export function collectionResponseToJSON(
  collectionResponse: CollectionResponse,
): string {
  return JSON.stringify(
    CollectionResponse$outboundSchema.parse(collectionResponse),
  );
}

export function collectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<CollectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionResponse' from JSON`,
  );
}
