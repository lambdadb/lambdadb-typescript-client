/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectsCollectionsCreateCollection } from "../funcs/projectsCollectionsCreateCollection.js";
import { projectsCollectionsDeleteCollection } from "../funcs/projectsCollectionsDeleteCollection.js";
import { projectsCollectionsGetCollection } from "../funcs/projectsCollectionsGetCollection.js";
import { projectsCollectionsListcollections } from "../funcs/projectsCollectionsListcollections.js";
import { projectsCollectionsQueryCollection } from "../funcs/projectsCollectionsQueryCollection.js";
import { projectsCollectionsUpdateCollection } from "../funcs/projectsCollectionsUpdateCollection.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Docs } from "./docs.js";

export class Collections extends ClientSDK {
  private _docs?: Docs;
  get docs(): Docs {
    return (this._docs ??= new Docs(this._options));
  }

  /**
   * List all collections in an existing project.
   */
  async listcollections(
    request: operations.ListcollectionsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListcollectionsResponse> {
    return unwrapAsync(projectsCollectionsListcollections(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an collection.
   */
  async createCollection(
    request: operations.CreateCollectionRequest,
    options?: RequestOptions,
  ): Promise<models.CollectionResponse> {
    return unwrapAsync(projectsCollectionsCreateCollection(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an existing collection.
   */
  async deleteCollection(
    request: operations.DeleteCollectionRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteCollectionResponse> {
    return unwrapAsync(projectsCollectionsDeleteCollection(
      this,
      request,
      options,
    ));
  }

  /**
   * Get metadata of an existing collection.
   */
  async getCollection(
    request: operations.GetCollectionRequest,
    options?: RequestOptions,
  ): Promise<models.CollectionResponse> {
    return unwrapAsync(projectsCollectionsGetCollection(
      this,
      request,
      options,
    ));
  }

  /**
   * Configure an collection.
   */
  async updateCollection(
    request: operations.UpdateCollectionRequest,
    options?: RequestOptions,
  ): Promise<models.CollectionResponse> {
    return unwrapAsync(projectsCollectionsUpdateCollection(
      this,
      request,
      options,
    ));
  }

  /**
   * Search an collection with a query and return the most similar documents.
   */
  async queryCollection(
    request: operations.QueryCollectionRequest,
    options?: RequestOptions,
  ): Promise<operations.QueryCollectionResponse> {
    return unwrapAsync(projectsCollectionsQueryCollection(
      this,
      request,
      options,
    ));
  }
}
