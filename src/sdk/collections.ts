/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { collectionsCreateCollection } from "../funcs/collectionsCreateCollection.js";
import { collectionsDeleteCollection } from "../funcs/collectionsDeleteCollection.js";
import { collectionsGetCollection } from "../funcs/collectionsGetCollection.js";
import { collectionsListCollections } from "../funcs/collectionsListCollections.js";
import { collectionsQueryCollection } from "../funcs/collectionsQueryCollection.js";
import { collectionsUpdateCollection } from "../funcs/collectionsUpdateCollection.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Docs } from "./docs.js";

export class Collections extends ClientSDK {
  private _docs?: Docs;
  get docs(): Docs {
    return (this._docs ??= new Docs(this._options));
  }

  /**
   * List all collections in an existing project.
   */
  async listCollections(
    options?: RequestOptions,
  ): Promise<operations.ListCollectionsResponse> {
    return unwrapAsync(collectionsListCollections(
      this,
      options,
    ));
  }

  /**
   * Create a collection.
   */
  async createCollection(
    request: operations.CreateCollectionRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateCollectionResponse> {
    return unwrapAsync(collectionsCreateCollection(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an existing collection.
   */
  async deleteCollection(
    request: operations.DeleteCollectionRequest,
    options?: RequestOptions,
  ): Promise<models.MessageResponse> {
    return unwrapAsync(collectionsDeleteCollection(
      this,
      request,
      options,
    ));
  }

  /**
   * Get metadata of an existing collection.
   */
  async getCollection(
    request: operations.GetCollectionRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCollectionResponse> {
    return unwrapAsync(collectionsGetCollection(
      this,
      request,
      options,
    ));
  }

  /**
   * Configure a collection.
   */
  async updateCollection(
    request: operations.UpdateCollectionRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateCollectionResponse> {
    return unwrapAsync(collectionsUpdateCollection(
      this,
      request,
      options,
    ));
  }

  /**
   * Search a collection with a query and return the most similar documents.
   */
  async queryCollection(
    request: operations.QueryCollectionRequest,
    options?: RequestOptions,
  ): Promise<operations.QueryCollectionResponse> {
    return unwrapAsync(collectionsQueryCollection(
      this,
      request,
      options,
    ));
  }
}
