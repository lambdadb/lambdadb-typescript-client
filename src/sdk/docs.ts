/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectsCollectionsDocsBulkUpsertDocs } from "../funcs/projectsCollectionsDocsBulkUpsertDocs.js";
import { projectsCollectionsDocsDeleteDocs } from "../funcs/projectsCollectionsDocsDeleteDocs.js";
import { projectsCollectionsDocsFetchDocs } from "../funcs/projectsCollectionsDocsFetchDocs.js";
import { projectsCollectionsDocsGetBulkUpsertDocs } from "../funcs/projectsCollectionsDocsGetBulkUpsertDocs.js";
import { projectsCollectionsDocsUpsertDocs } from "../funcs/projectsCollectionsDocsUpsertDocs.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Docs extends ClientSDK {
  /**
   * Upsert documents into an collection. Note that the maximum supported payload size is 6MB.
   */
  async upsertDocs(
    request: operations.UpsertDocsRequest,
    options?: RequestOptions,
  ): Promise<operations.UpsertDocsResponse> {
    return unwrapAsync(projectsCollectionsDocsUpsertDocs(
      this,
      request,
      options,
    ));
  }

  /**
   * Request required info to upload documents.
   */
  async getBulkUpsertDocs(
    request: operations.GetBulkUpsertDocsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetBulkUpsertDocsResponse> {
    return unwrapAsync(projectsCollectionsDocsGetBulkUpsertDocs(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk upsert documents into an collection. Note that the maximum supported object size is 200MB.
   */
  async bulkUpsertDocs(
    request: operations.BulkUpsertDocsRequest,
    options?: RequestOptions,
  ): Promise<operations.BulkUpsertDocsResponse> {
    return unwrapAsync(projectsCollectionsDocsBulkUpsertDocs(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete documents by document IDs or query filter from an collection.
   */
  async deleteDocs(
    request: operations.DeleteDocsRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteDocsResponse> {
    return unwrapAsync(projectsCollectionsDocsDeleteDocs(
      this,
      request,
      options,
    ));
  }

  /**
   * Lookup and return documents by document IDs from an collection.
   */
  async fetchDocs(
    request: operations.FetchDocsRequest,
    options?: RequestOptions,
  ): Promise<operations.FetchDocsResponse> {
    return unwrapAsync(projectsCollectionsDocsFetchDocs(
      this,
      request,
      options,
    ));
  }
}
