/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { collectionsDocsBulkUpsertDocs } from "../funcs/collectionsDocsBulkUpsertDocs.js";
import { collectionsDocsDeleteDocs } from "../funcs/collectionsDocsDeleteDocs.js";
import { collectionsDocsFetchDocs } from "../funcs/collectionsDocsFetchDocs.js";
import { collectionsDocsGetBulkUpsertDocs } from "../funcs/collectionsDocsGetBulkUpsertDocs.js";
import { collectionsDocsUpdateDocs } from "../funcs/collectionsDocsUpdateDocs.js";
import { collectionsDocsUpsertDocs } from "../funcs/collectionsDocsUpsertDocs.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Docs extends ClientSDK {
  /**
   * Upsert documents into a collection. Note that the maximum supported payload size is 6MB.
   */
  async upsertDocs(
    request: operations.UpsertDocsRequest,
    options?: RequestOptions,
  ): Promise<models.MessageResponse> {
    return unwrapAsync(collectionsDocsUpsertDocs(
      this,
      request,
      options,
    ));
  }

  /**
   * Request required info to upload documents.
   */
  async getBulkUpsertDocs(
    request: operations.GetBulkUpsertDocsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetBulkUpsertDocsResponse> {
    return unwrapAsync(collectionsDocsGetBulkUpsertDocs(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk upsert documents into a collection. Note that the maximum supported object size is 200MB.
   */
  async bulkUpsertDocs(
    request: operations.BulkUpsertDocsRequest,
    options?: RequestOptions,
  ): Promise<models.MessageResponse> {
    return unwrapAsync(collectionsDocsBulkUpsertDocs(
      this,
      request,
      options,
    ));
  }

  /**
   * Update documents in a collection. Note that the maximum supported payload size is 6MB.
   */
  async updateDocs(
    request: operations.UpdateDocsRequest,
    options?: RequestOptions,
  ): Promise<models.MessageResponse> {
    return unwrapAsync(collectionsDocsUpdateDocs(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete documents by document IDs or query filter from a collection.
   */
  async deleteDocs(
    request: operations.DeleteDocsRequest,
    options?: RequestOptions,
  ): Promise<models.MessageResponse> {
    return unwrapAsync(collectionsDocsDeleteDocs(
      this,
      request,
      options,
    ));
  }

  /**
   * Lookup and return documents by document IDs from a collection.
   */
  async fetchDocs(
    request: operations.FetchDocsRequest,
    options?: RequestOptions,
  ): Promise<operations.FetchDocsResponse> {
    return unwrapAsync(collectionsDocsFetchDocs(
      this,
      request,
      options,
    ));
  }
}
