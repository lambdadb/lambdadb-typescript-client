/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { LambdaDBCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$collectionsCreateCollection } from "./tools/collectionsCreateCollection.js";
import { tool$collectionsDeleteCollection } from "./tools/collectionsDeleteCollection.js";
import { tool$collectionsDocsBulkUpsertDocs } from "./tools/collectionsDocsBulkUpsertDocs.js";
import { tool$collectionsDocsDeleteDocs } from "./tools/collectionsDocsDeleteDocs.js";
import { tool$collectionsDocsFetchDocs } from "./tools/collectionsDocsFetchDocs.js";
import { tool$collectionsDocsGetBulkUpsertDocs } from "./tools/collectionsDocsGetBulkUpsertDocs.js";
import { tool$collectionsDocsUpdateDocs } from "./tools/collectionsDocsUpdateDocs.js";
import { tool$collectionsDocsUpsertDocs } from "./tools/collectionsDocsUpsertDocs.js";
import { tool$collectionsGetCollection } from "./tools/collectionsGetCollection.js";
import { tool$collectionsListCollections } from "./tools/collectionsListCollections.js";
import { tool$collectionsQueryCollection } from "./tools/collectionsQueryCollection.js";
import { tool$collectionsUpdateCollection } from "./tools/collectionsUpdateCollection.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL?: string | undefined;
  projectApiKey?: SDKOptions["projectApiKey"] | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
  projectHost?: SDKOptions["projectHost"] | undefined;
}) {
  const server = new McpServer({
    name: "LambdaDB",
    version: "0.1.0",
  });

  const client = new LambdaDBCore({
    projectApiKey: deps.projectApiKey,
    serverURL: deps.serverURL,
    serverIdx: deps.serverIdx,
    projectHost: deps.projectHost,
  });

  const scopes = new Set(deps.scopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$collectionsListCollections);
  tool(tool$collectionsCreateCollection);
  tool(tool$collectionsDeleteCollection);
  tool(tool$collectionsGetCollection);
  tool(tool$collectionsUpdateCollection);
  tool(tool$collectionsQueryCollection);
  tool(tool$collectionsDocsUpsertDocs);
  tool(tool$collectionsDocsGetBulkUpsertDocs);
  tool(tool$collectionsDocsBulkUpsertDocs);
  tool(tool$collectionsDocsUpdateDocs);
  tool(tool$collectionsDocsDeleteDocs);
  tool(tool$collectionsDocsFetchDocs);

  return server;
}
