/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { LambdaDBCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$projectsCollectionsCreateCollection } from "./tools/projectsCollectionsCreateCollection.js";
import { tool$projectsCollectionsDeleteCollection } from "./tools/projectsCollectionsDeleteCollection.js";
import { tool$projectsCollectionsDocsBulkUpsertDocs } from "./tools/projectsCollectionsDocsBulkUpsertDocs.js";
import { tool$projectsCollectionsDocsDeleteDocs } from "./tools/projectsCollectionsDocsDeleteDocs.js";
import { tool$projectsCollectionsDocsFetchDocs } from "./tools/projectsCollectionsDocsFetchDocs.js";
import { tool$projectsCollectionsDocsGetBulkUpsertDocs } from "./tools/projectsCollectionsDocsGetBulkUpsertDocs.js";
import { tool$projectsCollectionsDocsUpsertDocs } from "./tools/projectsCollectionsDocsUpsertDocs.js";
import { tool$projectsCollectionsGetCollection } from "./tools/projectsCollectionsGetCollection.js";
import { tool$projectsCollectionsListcollections } from "./tools/projectsCollectionsListcollections.js";
import { tool$projectsCollectionsQueryCollection } from "./tools/projectsCollectionsQueryCollection.js";
import { tool$projectsCollectionsUpdateCollection } from "./tools/projectsCollectionsUpdateCollection.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL?: string | undefined;
  projectApiKey?: SDKOptions["projectApiKey"] | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
}) {
  const server = new McpServer({
    name: "LambdaDB",
    version: "0.0.4",
  });

  const client = new LambdaDBCore({
    projectApiKey: deps.projectApiKey,
    serverURL: deps.serverURL,
    serverIdx: deps.serverIdx,
  });

  const scopes = new Set(deps.scopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$projectsCollectionsListcollections);
  tool(tool$projectsCollectionsCreateCollection);
  tool(tool$projectsCollectionsDeleteCollection);
  tool(tool$projectsCollectionsGetCollection);
  tool(tool$projectsCollectionsUpdateCollection);
  tool(tool$projectsCollectionsQueryCollection);
  tool(tool$projectsCollectionsDocsUpsertDocs);
  tool(tool$projectsCollectionsDocsGetBulkUpsertDocs);
  tool(tool$projectsCollectionsDocsBulkUpsertDocs);
  tool(tool$projectsCollectionsDocsDeleteDocs);
  tool(tool$projectsCollectionsDocsFetchDocs);

  return server;
}
